from fastapi import FastAPI, HTTPException, Query, BackgroundTasks
from fastapi.responses import JSONResponse
from typing import List, Optional, Dict, Any
import json
import asyncio
from datetime import datetime, timedelta
import logging
from pathlib import Path
from rapidfuzz import fuzz
import re
import uvicorn
from xml_fetcher import XMLFetcher

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√µes
JSON_FILE_PATH = "estoque.json"
UPDATE_INTERVAL_MINUTES = 2  # Alterado para 2 minutos
FUZZY_THRESHOLD = 85

app = FastAPI(
    title="API Estoque de Ve√≠culos",
    description="API para consulta de estoque de ve√≠culos com busca fuzzy e filtros avan√ßados",
    version="1.0.0"
)

# Vari√°veis globais para armazenar dados
vehicle_data = {"data": None, "last_update": None}
scheduler_task = None

# Mapeamento de cores flex√≠vel
COLOR_MAPPING = {
    "branco": ["branco", "branca", "white"],
    "preto": ["preto", "preta", "black"],
    "vermelho": ["vermelho", "vermelha", "red"],
    "azul": ["azul", "blue"],
    "prata": ["prata", "prata", "silver", "cinza", "gray"],
    "amarelo": ["amarelo", "amarela", "yellow"],
    "verde": ["verde", "green"],
    "bege": ["bege", "creme", "cream"],
    "dourado": ["dourado", "dourada", "gold"],
    "rosa": ["rosa", "pink"],
    "roxo": ["roxo", "roxa", "purple"],
    "marrom": ["marrom", "brown"]
}

def normalize_color(color_input: str) -> Optional[str]:
    """Normaliza a cor de entrada para a cor padr√£o do estoque"""
    if not color_input:
        return None
    
    color_lower = color_input.lower().strip()
    
    for standard_color, variations in COLOR_MAPPING.items():
        if color_lower in [v.lower() for v in variations]:
            return standard_color.upper()
    
    return color_input.upper()

def fuzzy_match_model(search_term: str, model: str, threshold: int = FUZZY_THRESHOLD) -> bool:
    """Verifica se o modelo corresponde ao termo de busca usando fuzzy matching"""
    if not search_term or not model:
        return True if not search_term else False
    
    def normalize_string(s):
        return re.sub(r'[^a-z0-9\s]', '', s.lower()).strip()
    
    search_normalized = normalize_string(search_term)
    model_normalized = normalize_string(model)
    
    # 1. BUSCA EXATA: Mais importante - deve ter prioridade
    if search_normalized in model_normalized:
        return True
    
    # 2. BUSCA POR PALAVRAS EXATAS: Cada palavra do search deve estar no modelo
    search_words = search_normalized.split()
    model_words = model_normalized.split()
    
    # Para buscas espec√≠ficas como "s10", deve encontrar palavra similar
    if len(search_words) == 1:
        search_word = search_words[0]
        for model_word in model_words:
            # Busca exata na palavra
            if search_word == model_word:
                return True
            # Busca substring apenas se for bem espec√≠fica
            if len(search_word) >= 3 and search_word in model_word:
                return True
            # Fuzzy apenas para palavras muito similares (>= 90%)
            if len(search_word) >= 3 and fuzz.ratio(search_word, model_word) >= 90:
                return True
    
    # 3. BUSCA M√öLTIPLAS PALAVRAS: Todas as palavras devem ter match
    else:
        matches = 0
        for search_word in search_words:
            word_found = False
            for model_word in model_words:
                if (search_word == model_word or 
                    (len(search_word) >= 3 and search_word in model_word) or
                    (len(search_word) >= 3 and fuzz.ratio(search_word, model_word) >= 85)):
                    word_found = True
                    break
            if word_found:
                matches += 1
        
        # Todas as palavras devem ter match
        if matches == len(search_words):
            return True
    
    # 4. √öLTIMO RECURSO: Apenas para casos muito espec√≠ficos como "s-10" vs "s10"
    search_clean = ''.join(c for c in search_normalized if c.isalnum())
    model_clean = ''.join(c for c in model_normalized if c.isalnum())
    
    # Deve ser match exato ou quase exato ap√≥s limpeza
    if len(search_clean) >= 3:
        for model_word in model_words:
            model_word_clean = ''.join(c for c in model_word if c.isalnum())
            if search_clean == model_word_clean:
                return True
            # Apenas se for muito similar (>= 95%)
            if len(search_clean) >= 3 and fuzz.ratio(search_clean, model_word_clean) >= 95:
                return True
    
    return False

def fuzzy_match_year(search_term: str, year_field: str) -> bool:
    """Verifica se o ano corresponde ao termo de busca"""
    if not search_term or not year_field:
        return True if not search_term else False
    
    if search_term in year_field:
        return True
    
    return fuzz.partial_ratio(search_term, year_field) >= FUZZY_THRESHOLD

async def load_vehicle_data():
    """Carrega dados dos ve√≠culos do JSON"""
    global vehicle_data
    
    try:
        if Path(JSON_FILE_PATH).exists():
            with open(JSON_FILE_PATH, 'r', encoding='utf-8') as f:
                data = json.load(f)
                vehicle_data["data"] = data
                vehicle_data["last_update"] = datetime.now()
                logger.info(f"Dados carregados: {len(data.get('veiculos', []))} ve√≠culos")
        else:
            logger.warning(f"Arquivo {JSON_FILE_PATH} n√£o encontrado")
            vehicle_data["data"] = None
    except Exception as e:
        logger.error(f"Erro ao carregar dados: {e}")
        vehicle_data["data"] = None

async def update_data_from_xml():
    """Atualiza os dados convertendo XML para JSON"""
    try:
        logger.info("üîÑ Iniciando atualiza√ß√£o autom√°tica dos dados...")
        
        fetcher = XMLFetcher()
        data = fetcher.parse_xml()
        fetcher.save_json(JSON_FILE_PATH)
        
        await load_vehicle_data()
        
        logger.info(f"‚úÖ Dados atualizados com sucesso: {len(data.get('veiculos', []))} ve√≠culos")
        logger.info(f"üì° Fonte: {fetcher.xml_source}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar dados: {e}")
        logger.error(f"üîß Verifique se a URL est√° configurada corretamente no xml_fetcher.py")

async def scheduler():
    """Scheduler para atualizar dados a cada 2 minutos"""
    while True:
        try:
            current_time = datetime.now().strftime("%H:%M:%S")
            logger.info(f"‚è∞ [{current_time}] Executando atualiza√ß√£o autom√°tica do scheduler...")
            
            await update_data_from_xml()
            
            logger.info(f"‚åõ Pr√≥xima atualiza√ß√£o em {UPDATE_INTERVAL_MINUTES} minutos...")
            await asyncio.sleep(UPDATE_INTERVAL_MINUTES * 60)  # Convertido para segundos
            
        except Exception as e:
            logger.error(f"‚ùå Erro no scheduler: {e}")
            logger.info(f"üîÑ Tentando novamente em 30 segundos...")
            await asyncio.sleep(30)

@app.on_event("startup")
async def startup_event():
    """Inicializa√ß√£o da aplica√ß√£o"""
    global scheduler_task
    
    await load_vehicle_data()
    
    if vehicle_data["data"] is None:
        await update_data_from_xml()
    
    scheduler_task = asyncio.create_task(scheduler())
    logger.info(f"üöÄ Aplica√ß√£o iniciada e scheduler ativo (interval: {UPDATE_INTERVAL_MINUTES} minutos)")

@app.on_event("shutdown")
async def shutdown_event():
    """Encerramento da aplica√ß√£o"""
    global scheduler_task
    if scheduler_task:
        scheduler_task.cancel()
    logger.info("üõë Aplica√ß√£o encerrada")

@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes da API"""
    return {
        "message": "API Estoque de Ve√≠culos",
        "version": "1.0.0",
        "last_update": vehicle_data["last_update"].isoformat() if vehicle_data["last_update"] else None,
        "total_vehicles": len(vehicle_data["data"]["veiculos"]) if vehicle_data["data"] else 0,
        "scheduler_interval": f"{UPDATE_INTERVAL_MINUTES} minutos",
        "endpoints": {
            "vehicles": "/vehicles - Lista ve√≠culos com filtros (sem limite)",
            "vehicle": "/vehicles/{sequencia} - Busca por sequ√™ncia",
            "catalogo": "/catalogo - Cat√°logo em texto: MODELO - ANO - KM",
            "summary": "/summary - Resumo do estoque",
            "update": "/update - For√ßa atualiza√ß√£o dos dados",
            "parametros": "placa, modelo, cor, ano, kmmax, valormax"
        }
    }

@app.get("/vehicles")
async def get_vehicles(
    placa: Optional[str] = Query(None, description="Placa do ve√≠culo"),
    modelo: Optional[str] = Query(None, description="Modelo (busca fuzzy)"),
    cor: Optional[str] = Query(None, description="Cor (aceita varia√ß√µes)"),
    ano: Optional[str] = Query(None, description="Ano (busca em 2020/2021 se buscar 2020)"),
    kmmax: Optional[int] = Query(None, description="KM m√°ximo (cap de km)"),
    valormax: Optional[int] = Query(None, description="Valor m√°ximo em reais (cap de pre√ßo)"),
    limit: Optional[int] = Query(None, description="Limite de resultados (opcional)"),
    offset: Optional[int] = Query(0, description="Offset para pagina√ß√£o")
):
    """Busca ve√≠culos com filtros - sem limite padr√£o de resultados"""
    try:
        if vehicle_data["data"] is None:
            raise HTTPException(status_code=503, detail="Dados n√£o dispon√≠veis")
        
        vehicles = vehicle_data["data"]["veiculos"]
        if not vehicles:
            return {
                "total": 0,
                "limit": limit,
                "offset": offset,
                "vehicles": []
            }
        
        filtered_vehicles = []
        
        normalized_color = None
        if cor:
            try:
                normalized_color = normalize_color(cor)
            except Exception as e:
                logger.warning(f"Erro ao normalizar cor '{cor}': {e}")
        
        for vehicle in vehicles:
            try:
                # Filtro por placa
                if placa and vehicle.get("placa"):
                    if placa.upper() not in vehicle["placa"].upper():
                        continue
                
                # Filtro por modelo
                if modelo:
                    if not fuzzy_match_model(modelo, vehicle.get("modelo", "")):
                        continue
                
                # Filtro por cor
                if normalized_color and vehicle.get("cor") != normalized_color:
                    continue
                
                # Filtro por ano
                if ano:
                    if not fuzzy_match_year(ano, vehicle.get("ano", "")):
                        continue
                
                # Filtro por KM m√°ximo
                if kmmax is not None and vehicle.get("km") is not None:
                    if vehicle["km"] > kmmax:
                        continue
                
                # Filtro por valor m√°ximo
                if valormax is not None and vehicle.get("preco") is not None:
                    if vehicle["preco"] > valormax:
                        continue
                
                filtered_vehicles.append(vehicle)
                
            except Exception as e:
                logger.error(f"Erro ao processar ve√≠culo {vehicle.get('sequencia', 'unknown')}: {e}")
                continue
        
        total = len(filtered_vehicles)
        
        # Aplicar pagina√ß√£o somente se limit for especificado
        if limit is not None:
            paginated_vehicles = filtered_vehicles[offset:offset + limit]
        else:
            # Se offset for especificado sem limit, aplicar apenas offset
            if offset > 0:
                paginated_vehicles = filtered_vehicles[offset:]
            else:
                paginated_vehicles = filtered_vehicles
        
        return {
            "total": total,
            "limit": limit,
            "offset": offset,
            "vehicles": paginated_vehicles
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro interno na busca de ve√≠culos: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.get("/vehicles/{sequencia}")
async def get_vehicle_by_sequencia(sequencia: int):
    """Busca um ve√≠culo espec√≠fico pela sequ√™ncia"""
    try:
        if vehicle_data["data"] is None:
            raise HTTPException(status_code=503, detail="Dados n√£o dispon√≠veis")
        
        vehicles = vehicle_data["data"]["veiculos"]
        
        for vehicle in vehicles:
            if vehicle.get("sequencia") == sequencia:
                return vehicle
        
        raise HTTPException(status_code=404, detail="Ve√≠culo n√£o encontrado")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao buscar ve√≠culo {sequencia}: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.get("/catalogo")
async def get_catalogo(
    modelo: Optional[str] = Query(None, description="Modelo (busca fuzzy)"),
    cor: Optional[str] = Query(None, description="Cor (aceita varia√ß√µes)"),
    ano: Optional[str] = Query(None, description="Ano"),
    kmmax: Optional[int] = Query(None, description="KM m√°ximo"),
    valormax: Optional[int] = Query(None, description="Valor m√°ximo em reais"),
    format: Optional[str] = Query("text", description="Formato de resposta: 'text' ou 'json'")
):
    """Retorna cat√°logo de ve√≠culos em formato texto, uma linha por ve√≠culo"""
    try:
        if vehicle_data["data"] is None:
            raise HTTPException(status_code=503, detail="Dados n√£o dispon√≠veis")
        
        vehicles = vehicle_data["data"]["veiculos"]
        if not vehicles:
            if format.lower() == "json":
                return {"total": 0, "vehicles": []}
            else:
                return "Nenhum ve√≠culo encontrado no estoque."
        
        filtered_vehicles = []
        
        # Aplicar os mesmos filtros do endpoint /vehicles
        normalized_color = None
        if cor:
            try:
                normalized_color = normalize_color(cor)
            except Exception as e:
                logger.warning(f"Erro ao normalizar cor '{cor}': {e}")
        
        for vehicle in vehicles:
            try:
                # Filtro por modelo
                if modelo:
                    if not fuzzy_match_model(modelo, vehicle.get("modelo", "")):
                        continue
                
                # Filtro por cor
                if normalized_color and vehicle.get("cor") != normalized_color:
                    continue
                
                # Filtro por ano
                if ano:
                    if not fuzzy_match_year(ano, vehicle.get("ano", "")):
                        continue
                
                # Filtro por KM m√°ximo
                if kmmax is not None and vehicle.get("km") is not None:
                    if vehicle["km"] > kmmax:
                        continue
                
                # Filtro por valor m√°ximo
                if valormax is not None and vehicle.get("preco") is not None:
                    if vehicle["preco"] > valormax:
                        continue
                
                filtered_vehicles.append(vehicle)
                
            except Exception as e:
                logger.error(f"Erro ao processar ve√≠culo {vehicle.get('sequencia', 'unknown')}: {e}")
                continue
        
        # Gerar as linhas do cat√°logo
        catalog_lines = []
        
        for vehicle in filtered_vehicles:
            modelo = vehicle.get("modelo", "MODELO N√ÉO INFORMADO")
            ano = vehicle.get("ano", "ANO N√ÉO INFORMADO")
            km = vehicle.get("km")
            
            # Formatar KM
            if km is not None:
                if km == 0:
                    km_formatted = "0 KM"
                else:
                    km_formatted = f"{km:,} KM".replace(",", ".")
            else:
                km_formatted = "KM N√ÉO INFORMADO"
            
            # Criar linha no formato: MODELO - ANO - KM
            line = f"{modelo} - {ano} - {km_formatted}"
            catalog_lines.append(line)
        
        if format.lower() == "json":
            return {
                "total": len(catalog_lines),
                "vehicles": catalog_lines
            }
        else:
            # Retornar como texto simples
            if not catalog_lines:
                return "Nenhum ve√≠culo encontrado com os filtros especificados."
            
            catalog_text = "\n".join(catalog_lines)
            
            # Adicionar cabe√ßalho com total
            header = f"CAT√ÅLOGO DE VE√çCULOS ({len(catalog_lines)} ve√≠culos encontrados)\n"
            header += "=" * 50 + "\n\n"
            
            return header + catalog_text
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro interno no cat√°logo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro interno do servidor: {str(e)}")

@app.get("/summary")
async def get_summary():
    """Retorna resumo estat√≠stico do estoque"""
    try:
        if vehicle_data["data"] is None:
            raise HTTPException(status_code=503, detail="Dados n√£o dispon√≠veis")
        
        fetcher = XMLFetcher()
        fetcher.data = vehicle_data["data"]
        summary = fetcher.get_summary()
        
        summary["data_geracao"] = vehicle_data["data"].get("dataGeracao")
        summary["ultima_atualizacao"] = vehicle_data["last_update"].isoformat() if vehicle_data["last_update"] else None
        
        return summary
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Erro ao gerar resumo: {e}")
        raise HTTPException(status_code=500, detail=f"Erro ao gerar resumo: {str(e)}")

@app.post("/update")
async def force_update(background_tasks: BackgroundTasks):
    """For√ßa atualiza√ß√£o dos dados do XML"""
    background_tasks.add_task(update_data_from_xml)
    return {"message": "Atualiza√ß√£o iniciada em background"}

@app.get("/colors")
async def get_available_colors():
    """Retorna cores dispon√≠veis e suas varia√ß√µes aceitas"""
    return {
        "color_mapping": COLOR_MAPPING,
        "description": "Voc√™ pode usar qualquer varia√ß√£o listada para cada cor"
    }

@app.get("/config")
async def get_config():
    """Retorna configura√ß√µes atuais da API"""
    from xml_fetcher import XML_URL
    
    return {
        "xml_url": XML_URL,
        "update_interval_minutes": UPDATE_INTERVAL_MINUTES,
        "fuzzy_threshold": FUZZY_THRESHOLD,
        "json_output": JSON_FILE_PATH,
        "note": "Configure a URL no arquivo xml_fetcher.py"
    }

@app.get("/health")
async def health_check():
    """Verifica sa√∫de da aplica√ß√£o"""
    from xml_fetcher import XML_URL
    
    status = "healthy" if vehicle_data["data"] is not None else "unhealthy"
    
    return {
        "status": status,
        "last_update": vehicle_data["last_update"].isoformat() if vehicle_data["last_update"] else None,
        "total_vehicles": len(vehicle_data["data"]["veiculos"]) if vehicle_data["data"] else 0,
        "xml_url": XML_URL,
        "json_file_exists": Path(JSON_FILE_PATH).exists(),
        "scheduler_interval": f"{UPDATE_INTERVAL_MINUTES} minutos"
    }

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
